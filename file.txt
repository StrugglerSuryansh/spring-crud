# Creating a Basic CRUD Application with Spring Boot and PostgreSQL

## 1. Set up the project

1. Go to [Spring Initializr](https://start.spring.io/)
2. Choose:
   - Project: Maven
   - Language: Java
   - Spring Boot: 2.7.x (or the latest stable version)
   - Group: com.example
   - Artifact: crud-demo
   - Dependencies: Spring Web, Spring Data JPA, PostgreSQL Driver

3. Generate and download the project

## 2. Set up the database

1. Install PostgreSQL if you haven't already
2. Create a new database named `cruddemo`

## 3. Configure application.properties

In `src/main/resources/application.properties`:

```properties
spring.datasource.url=jdbc:postgresql://localhost:5432/cruddemo
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
```

## 4. Create the entity

Create a new file `src/main/java/com/example/cruddemo/model/Item.java`:

```java
package com.example.cruddemo.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Item {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String description;

    // Getters and setters
}
```

## 5. Create the repository

Create a new file `src/main/java/com/example/cruddemo/repository/ItemRepository.java`:

```java
package com.example.cruddemo.repository;

import com.example.cruddemo.model.Item;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ItemRepository extends JpaRepository<Item, Long> {
}
```

## 6. Create the controller

Create a new file `src/main/java/com/example/cruddemo/controller/ItemController.java`:

```java
package com.example.cruddemo.controller;

import com.example.cruddemo.model.Item;
import com.example.cruddemo.repository.ItemRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/items")
public class ItemController {

    @Autowired
    private ItemRepository itemRepository;

    @GetMapping
    public List<Item> getAllItems() {
        return itemRepository.findAll();
    }

    @PostMapping
    public Item createItem(@RequestBody Item item) {
        return itemRepository.save(item);
    }

    @GetMapping("/{id}")
    public Item getItem(@PathVariable Long id) {
        return itemRepository.findById(id).orElseThrow(() -> new RuntimeException("Item not found"));
    }

    @PutMapping("/{id}")
    public Item updateItem(@PathVariable Long id, @RequestBody Item itemDetails) {
        Item item = itemRepository.findById(id).orElseThrow(() -> new RuntimeException("Item not found"));
        item.setName(itemDetails.getName());
        item.setDescription(itemDetails.getDescription());
        return itemRepository.save(item);
    }

    @DeleteMapping("/{id}")
    public void deleteItem(@PathVariable Long id) {
        itemRepository.deleteById(id);
    }
}
```

## 7. Run the application

Run the main class `CrudDemoApplication.java`

## 8. Test the API

Use a tool like Postman or curl to test the endpoints:

- CREATE: POST http://localhost:8080/api/items
- READ: GET http://localhost:8080/api/items or GET http://localhost:8080/api/items/{id}
- UPDATE: PUT http://localhost:8080/api/items/{id}
- DELETE: DELETE http://localhost:8080/api/items/{id}

This setup provides a basic CRUD application using Spring Boot and PostgreSQL.